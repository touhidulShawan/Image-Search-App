{"version":3,"sources":["components/SearchBar.js","components/ImageCard.js","components/ImageList.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","term","onFormSubmit","event","preventDefault","_this","props","onSubmit","_this2","this","react_default","a","createElement","className","style","marginTop","action","htmlFor","type","value","onChange","setState","target","Component","ImageCard","spans","imageRef","React","createRef","setSpan","height","current","clientHeight","Math","ceil","addEventListener","gridRowEnd","concat","src","image","urls","regular","alt","description","ref","imageList","images","map","components_ImageCard","key","id","App","onSearchSubmit","axios","get","params","query","headers","Authorization","then","response","data","results","components_SearchBar","components_ImageList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SA+BeA,6MA5BbC,MAAQ,CACNC,KAAM,OAERC,aAAe,SAAAC,GACbA,EAAMC,iBACNC,EAAKC,MAAMC,SAASF,EAAKL,MAAMC,+EAGxB,IAAAO,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,MAAO,CAAEC,UAAW,SAC9CL,EAAAC,EAAAC,cAAA,QAAMI,OAAO,GAAGH,UAAU,UAAUN,SAAUE,KAAKP,cACjDQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,IAAf,gBACAP,EAAAC,EAAAC,cAAA,SACEM,KAAK,OACLC,MAAOV,KAAKT,MAAMC,KAClBmB,SAAU,SAAAjB,GACRK,EAAKa,SAAS,CAAEpB,KAAME,EAAMmB,OAAOH,qBAnB3BI,aCmCTC,oNAlCbxB,MAAQ,CACNyB,MAAO,KAGTC,SAAWC,IAAMC,cAMjBC,QAAU,WACR,IAAMC,EAASzB,EAAKqB,SAASK,QAAQC,aAE/BP,EAAQQ,KAAKC,KAAKJ,EAAS,IAEjCzB,EAAKgB,SAAS,CAAEI,MAAOA,wFARvBhB,KAAKiB,SAASK,QAAQI,iBAAiB,OAAQ1B,KAAKoB,0CAYpD,OACEnB,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVC,MAAO,CAAEsB,WAAU,QAAAC,OAAU5B,KAAKT,MAAMyB,SAExCf,EAAAC,EAAAC,cAAA,OACE0B,IAAK7B,KAAKH,MAAMiC,MAAMC,KAAKC,QAC3BC,IAAKjC,KAAKH,MAAMiC,MAAMI,YACtBC,IAAKnC,KAAKiB,mBA5BIH,cCYTsB,EATG,SAAAvC,GAChB,IAAMwC,EAASxC,EAAMwC,OAAOC,IAAI,SAAAR,GAC9B,OACE7B,EAAAC,EAAAC,cAACoC,EAAD,CAAWC,IAAKV,EAAMW,GAAIX,MAAOA,MAGrC,OAAO7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAciC,ICuBvBK,6MA1BbnD,MAAQ,CACN8C,OAAQ,MAEVM,eAAiB,SAAAnD,GACfoD,IACGC,IAAI,yCAA0C,CAC7CC,OAAQ,CAAEC,MAAOvD,GACjBwD,QAAS,CACPC,cACE,gFAGLC,KAAK,SAAAC,GACJvD,EAAKgB,SAAS,CAAEyB,OAAQc,EAASC,KAAKC,qFAI1C,OACEpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACmD,EAAD,CAAWxD,SAAUE,KAAK2C,iBAC1B1C,EAAAC,EAAAC,cAACoD,EAAD,CAAWlB,OAAQrC,KAAKT,MAAM8C,iBArBpBvB,aCKE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.bea32826.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass SearchBar extends Component {\r\n  state = {\r\n    term: \" \"\r\n  };\r\n  onFormSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state.term);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ui segment\" style={{ marginTop: \"10px\" }}>\r\n        <form action=\"\" className=\"ui form\" onSubmit={this.onFormSubmit}>\r\n          <div className=\"field\">\r\n            <label htmlFor=\"\">Image Search</label>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.term}\r\n              onChange={event => {\r\n                this.setState({ term: event.target.value });\r\n              }}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ImageCard extends Component {\r\n  state = {\r\n    spans: 0\r\n  };\r\n\r\n  imageRef = React.createRef();\r\n\r\n  componentDidMount() {\r\n    this.imageRef.current.addEventListener(\"load\", this.setSpan);\r\n  }\r\n\r\n  setSpan = () => {\r\n    const height = this.imageRef.current.clientHeight;\r\n\r\n    const spans = Math.ceil(height / 10);\r\n\r\n    this.setState({ spans: spans });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"image-card\"\r\n        style={{ gridRowEnd: `span ${this.state.spans}` }}\r\n      >\r\n        <img\r\n          src={this.props.image.urls.regular}\r\n          alt={this.props.image.description}\r\n          ref={this.imageRef}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageCard;\r\n","import React from \"react\";\r\nimport \"../assets/css/ImageList.css\";\r\n\r\nimport ImageCard from \"./ImageCard\"\r\n\r\nconst imageList = props => {\r\n  const images = props.images.map(image => {\r\n    return (\r\n      <ImageCard key={image.id} image={image}/>\r\n    );\r\n  });\r\n  return <div className=\"image-list\">{images}</div>;\r\n};\r\n\r\nexport default imageList;\r\n","import React, { Component } from \"react\";\nimport \"../assets/css/App.css\";\nimport axios from \"axios\";\n\nimport SearchBar from \"../components/SearchBar\";\nimport ImageList from \"../components/ImageList\";\n\nclass App extends Component {\n  state = {\n    images: []\n  };\n  onSearchSubmit = term => {\n    axios\n      .get(\"https://api.unsplash.com/search/photos\", {\n        params: { query: term },\n        headers: {\n          Authorization:\n            \"Client-ID 3daa1c358646b6d4d27e8c541251c2c78047e4ffb3fe2bad5cdd08daf4a0753f\"\n        }\n      })\n      .then(response => {\n        this.setState({ images: response.data.results });\n      });\n  };\n  render() {\n    return (\n      <div className=\"App ui container\">\n        <SearchBar onSubmit={this.onSearchSubmit} />\n        <ImageList images={this.state.images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}